

def generate_health_status_page(selected_countries_list, selected_year):
    map = html.Div([
        dcc.Loading(
            id="loading-indicator",  # ID pour l'indicateur de chargement
            type="circle",  # Type de l'indicateur : 'circle', 'dot', 'default'
            children=[
                dcc.Graph(
                    id="world-map",
                    config={'scrollZoom': True, 'displayModeBar': False},
                    figure={},  # This initializes the map when the app loads
                    selectedData=None  # We use this property to capture selected country data
                )
            ]
        )
    ], style={'width': '60%', 'height': '40vh'})

    graph= update_health_graph(selected_countries_list,selected_year)

    row_1 = html.Div([
        map,graph
    ], style={'display': 'flex', 'flexDirection': 'row', 'padding': '5px','width': '100%'}),


    return row_1

def get_health_data(selected_countries_list, selected_year):

    country_codes = [c["alpha3"].lower() for c in selected_countries_list]

    os.environ["BASE_URL"] = "postgresql://webscraping_db_user:35RuggWvxnsRNbARA2QmiBqOpo0rVo83@dpg-cughkud6l47c73be2j10-a.frankfurt-postgres.render.com:5432/webscraping_db"

    database_url = os.getenv("BASE_URL")
    engine = create_engine(database_url)

    with engine.connect() as connection:
        metadata = MetaData()
        indicator_table = Table('Timed_Indicators', metadata, autoload_with=engine)

        query = select(indicator_table).where(
            and_(
                indicator_table.columns.id_indicator == "MMR_100k",
                indicator_table.columns.id_country.in_(country_codes),
                indicator_table.columns.year_recorded.between(2000, selected_year)
            )
        )

        result = connection.execute(query).fetchall()
        df = pd.DataFrame(result, columns=[col.name for col in indicator_table.columns])

        country_mapping = {c["alpha3"].lower(): c["name"] for c in selected_countries_list}
        df["id_country"] = df["id_country"].str.lower().map(country_mapping)

    return df

def update_health_graph(selected_countries_list, selected_year):

    # Récupérer les données filtrées
    #if country_codes:
    if selected_countries_list:
        df = get_health_data(selected_countries_list, selected_year)
        #else:
        #    print("No data found")
        #    return go.Figure()  # Retourne un graphique vide si aucune donnée trouvée

        # Création du graphique avec Plotly
        fig = px.line(
            data_frame= df,
            x="year_recorded",  # Modifier selon ta colonne contenant les années
            y="value",  # Modifier selon ta colonne contenant les valeurs
            color="id_country",  # Différencier les courbes par pays
            title=f"Evolution du taux de mortalité maternelle de 2000 à {selected_year}"
        )
    else:
        fig = {}

    return dcc.Graph(id='health-status-graph', figure=fig,style={'width': '60%', 'height': '40vh'})
